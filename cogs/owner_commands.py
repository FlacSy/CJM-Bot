import disnake 
from disnake.ext import commands  
from config.config import *

'''–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–µ–¥–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –∫–æ–≥–æ–≤'''
async def cog_error(ctx, error):
    await ctx.send(f"–û—à–∏–±–∫–∞: {error}", ephemeral=True)


class OwnerCommands(commands.Cog):
    def __init__(self, client):
        self.client = client

    @commands.Cog.listener()
    async def on_ready(self):
        print(f'–ö–æ–≥ {__name__} –∑–∞–≥—Ä—É–∂–µ–Ω...')

    @commands.command()
    async def maintenance(self, ctx, status):
        if ctx.author.id == owner_id:
            try:
                if status == 'on':
                    status_activity = disnake.Game("üë∑‚Äç‚ôÇÔ∏è–¢–ï–•–ù–ò–ß–ò–ß–ï–°–ö–ò–ï –†–ê–ë–û–¢–´üöß")
                    await self.client.change_presence(status=disnake.Status.idle, activity=status_activity)
                    await ctx.send(f'<:icons8toolbox64:1157819680636014664>–†–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–∏—Å–∫–∏—Ö —Ä–∞–±–æ—Ç –≤–∫–ª—é—á—ë–Ω<:icons8toolbox64:1157819680636014664>')
                elif status == 'off':
                    await self.client.change_presence(status=disnake.Status.online)
                    await ctx.send(f'<:icons8toolbox64:1157819680636014664>–†–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–∏—Å–∫–∏—Ö —Ä–∞–±–æ—Ç –≤—ã–∫–ª—é—á—ë–Ω<:icons8toolbox64:1157819680636014664>')

                elif status == False or status == None:
                    await ctx.send('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "maintenance on/off"', ephemeral=True)
                    
            except Exception as eror:
                print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{eror}')

    @commands.command()
    async def status(self, ctx, status):
        if ctx.author.id == owner_id:
            status_activity = disnake.Game(status)
            await self.client.change_presence(activity=status_activity) 

    @commands.command()
    async def clear_status(self, ctx):
        if ctx.author.id == owner_id:           
            await self.client.change_presence(status=disnake.Status.online) 

    '''–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–≥–æ–≤'''
    @commands.slash_command(name = 'load', guild_ids=[dev_guild])
    async def load(self, ctx, extension):
        if ctx.author.id == owner_id:
            try:
                await ctx.send("–ó–∞–≥—Ä—É–∑–∫–∞...", ephemeral=True)
                self.client.load_extension(f"cogs.{extension}")
                print(f'–ö–æ–≥ {extension} –∑–∞–≥—Ä—É–∂–µ–Ω...')
            except Exception as error:
                await cog_error(ctx, error)
                
    '''–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –∫–æ–≥–æ–≤'''
    @commands.slash_command(name = 'unload', guild_ids=[dev_guild])
    async def unload(self, ctx, extension):
        if ctx.author.id == owner_id:
            try:
                await ctx.send("–í—ã–≥—Ä—É–∑–∫–∞...", ephemeral=True)
                self.client.unload_extension(f"cogs.{extension}")
                print(f'–ö–æ–≥ {extension} –≤—ã–≥—Ä—É–∂–µ–Ω...')
            except Exception as error:
                await cog_error(ctx, error)

    '''–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–≥–æ–≤'''
    @commands.slash_command(name = 'reload', guild_ids=[dev_guild])
    async def reload(self, ctx, extension):
        if ctx.author.id == owner_id:
            try:
                await ctx.send("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...", ephemeral=True)
                self.client.unload_extension(f"cogs.{extension}")
                self.client.load_extension(f"cogs.{extension}")
                print(f'–ö–æ–≥ {extension} –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω...')   
            except Exception as error:
                await cog_error(ctx, error)

def setup(client):
    client.add_cog(OwnerCommands(client))